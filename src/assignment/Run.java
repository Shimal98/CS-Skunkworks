package assignment;

import java.io.IOException;
import java.text.ParseException;

public class Run {
	
 	public static void main(String[] a) throws IOException,ParseException {
   		
   		/*
   		 *   Illustrates use of convert routine.
   		 *   The example regexp ("x" | "y")* "x" "y" "y" is syntactically correct.
   		 *   To see what happens when there's a syntax error in the regexp, edit it to put in an error
   		 */
   		String re = "(\"x\" | \"y\")* \"x\" \"y\" \"y\"";
   		System.out.println("Converting regular expression " + re + " to RegExp expression tree");
        try {
   		  RegExp r =  (new RegExp2AST(re)).convert(); // Will need to convert RegExp to RegularExpression at some time
   		  System.out.println("No syntax errors");
   		  System.out.println("Original fully parenthesised regular expression : " + 
   		                     r.decompile());  
        } catch (ParseException ex) {
        	System.out.println("Error at/near position " + ex.getErrorOffset() + " : " + 
                               ex.getMessage());
          }
        
   	}
 	
 	public class RegularExpression extends RegExp { // Concrete class implementation of abstract RegExp class 

		@Override
		public Nfa makeNfa() {
			// TODO
			// Use Thompsons construction here to convert the regular expression to an NFA
			return null;
		}

		@Override
		public String decompile() {
			// TODO Auto-generated method stub
			return null;
		}
 		
 	}
 	
 	public Dfa applySubsetConstruction(Nfa m) {
 		// This is a method to take the NFA constructed above and convert it to an equivalent DFA
 		
 		// Use stuff from slides here
 		return null;
 	}
 	
 	public boolean isMemberOfLanguage(String s) {
 		// This is a method to compare the string against the DFA above to check if the string is in the language generated by the DFA
 		return false;
 	}

}
